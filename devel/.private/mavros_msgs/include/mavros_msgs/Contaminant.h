// Generated by gencpp from file mavros_msgs/Contaminant.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_CONTAMINANT_H
#define MAVROS_MSGS_MESSAGE_CONTAMINANT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct Contaminant_
{
  typedef Contaminant_<ContainerAllocator> Type;

  Contaminant_()
    : lat(0.0)
    , lon(0.0)
    , alt(0)
    , cons(0.0)
    , vhcl_id(0)
    , con_type(0)
    , con_id(0)  {
    }
  Contaminant_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lon(0.0)
    , alt(0)
    , cons(0.0)
    , vhcl_id(0)
    , con_type(0)
    , con_id(0)  {
  (void)_alloc;
    }



   typedef float _lat_type;
  _lat_type lat;

   typedef float _lon_type;
  _lon_type lon;

   typedef uint16_t _alt_type;
  _alt_type alt;

   typedef float _cons_type;
  _cons_type cons;

   typedef uint8_t _vhcl_id_type;
  _vhcl_id_type vhcl_id;

   typedef uint8_t _con_type_type;
  _con_type_type con_type;

   typedef uint8_t _con_id_type;
  _con_id_type con_id;




  typedef boost::shared_ptr< ::mavros_msgs::Contaminant_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::Contaminant_<ContainerAllocator> const> ConstPtr;

}; // struct Contaminant_

typedef ::mavros_msgs::Contaminant_<std::allocator<void> > Contaminant;

typedef boost::shared_ptr< ::mavros_msgs::Contaminant > ContaminantPtr;
typedef boost::shared_ptr< ::mavros_msgs::Contaminant const> ContaminantConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::Contaminant_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::Contaminant_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'mavros_msgs': ['/home/deddy/QGCInterface/src/mavros/mavros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::Contaminant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::Contaminant_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::Contaminant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::Contaminant_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::Contaminant_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::Contaminant_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::Contaminant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c6f9706e738c8a5714202e61fe27373";
  }

  static const char* value(const ::mavros_msgs::Contaminant_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c6f9706e738c8a5ULL;
  static const uint64_t static_value2 = 0x714202e61fe27373ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::Contaminant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/Contaminant";
  }

  static const char* value(const ::mavros_msgs::Contaminant_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::Contaminant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lat\n\
float32 lon\n\
uint16 alt\n\
float32 cons\n\
uint8 vhcl_id\n\
uint8 con_type\n\
uint8 con_id\n\
";
  }

  static const char* value(const ::mavros_msgs::Contaminant_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::Contaminant_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.cons);
      stream.next(m.vhcl_id);
      stream.next(m.con_type);
      stream.next(m.con_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Contaminant_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::Contaminant_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::Contaminant_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<float>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.alt);
    s << indent << "cons: ";
    Printer<float>::stream(s, indent + "  ", v.cons);
    s << indent << "vhcl_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vhcl_id);
    s << indent << "con_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.con_type);
    s << indent << "con_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.con_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_CONTAMINANT_H
